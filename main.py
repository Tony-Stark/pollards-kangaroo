import random

prng = random.randint(1, 2**32)
random.seed(prng)

g = 4793#21744646143243216057020228551156208752703942887207308868664445275548674736620508732925764357515199547303283870847514971207187185912917434889899462163342116463504651187567271577773370136574456671482796328194698430314464307239426297609039182878000113673163760381575629928593038563536234958563213385495445541911168414741250494418615704883548296728080545795859843320405072472266753448906714605637308642468422898558630812487636188819677130134963833040948411243908028200183454403067866539747291394732970142401544187137624428138444276721310399530477238861596789940953323090393313600101710523922727140772179016720953265564666
p = 9973#21847359589888208475506724917162265063571401985325370367631361781114029653025956815157605328190411141044160689815741319381196532979871500038979862309158738250945118554961626824152307536605872616502884288878062467052777605227846709781850614792748458838951342204812601838112937805371782600380106020522884406452823818824455683982042882928183431194593189171431066371138510252979648513553078762584596147427456837289623008879364829477705183636149304120998948654278133874026711188494311770883514889363351380064520413459602696141353949407971810071848354127868725934057811052285511726070951954828625761984797831079801857828431
h = pow(g,300,p)# 2379943664994463434447180799986543062713483099464815442605819358024518874205912039079297734838557301077499485690715187242732637166621861199722810552790750351063910501376656279916109818380142480153541630024844375987866909360327482454547879833328229210199064615160934199590056906292770813436916890557374599901608776771002737638288892742464424376302165637115904125111643815237390808049788607647462153922322177386615212924778476029834861337534317344050414511899408665633738083462745720713477559240135989896733710248600757926137849819921071458210373753356840504150106675895043640641251817448597517740418989043930823670446
w = 400 #pow(2, 50, p)


def s_map(x, n):
    random.seed(prng*x)
    return random.randint(0, n)


def main():
    n = 1024
    tame_lookup = {}
    wild_lookup = {}
    x0 = pow(g, w//2, p)
    print("x0: ", x0)
    y0 = h
    print("y0: ", y0)
    print("s(x0)= ", s_map(x0, n))
    x_i = (x0*pow(g, s_map(x0, n), p)) % p
    y_i = (y0*pow(g, s_map(y0, n), p)) % p
    tame_lookup[x_i] = (s_map(x0, n) + (w//2)) % p
    wild_lookup[y_i] = s_map(y0, n) % p
    exp_x = (s_map(x0, n) + (w//2)) % p
    exp_y = s_map(y0, n) % p
    iter_num = 0
    while iter_num < 34000000:
        print("iteration #", iter_num)
        iter_num += 1
        exp_x = (s_map(x_i, n) + exp_x)
        prev_s_map = s_map(x_i, n)
        prev_x_i = x_i
        x_i = (x_i*pow(g, s_map(x_i, n), p)) % p
        tame_lookup[x_i] = exp_x
        if pow(g, exp_x, p) != x_i:
            print("tame lookup: ", tame_lookup)
            print("exp: ", exp_x)
            print("x_i: ", x_i)
            print("smap(x_(i-1)): ", prev_s_map)
            print("x_(i-1): ", prev_x_i)
            return
        if found_y := wild_lookup.get(x_i):
            print("exp_x ", exp_x, "| |", "exp_y ", found_y)
            print("final answer is either ", (exp_x - found_y) % (p-1), "or ", (found_y - exp_x) % (p-1))
            print(tame_lookup, "\n", wild_lookup)
            return
        exp_y = (s_map(y_i, n) + exp_y)
        y_i = (y_i*pow(g, s_map(y_i, n), p)) % p
        wild_lookup[y_i] = exp_y
        if (h*pow(g, exp_y, p) % p) != y_i:
            print("wild lookup: ", wild_lookup)
            print("exp: ", exp_y)
            print("x_i: ", y_i)
            return
        if found_x := tame_lookup.get(y_i):
            print("exp_y ", exp_y, "| |", "exp_x ", found_x)
            print("final answer is either ", (exp_y - found_x) % (p-1), "or ", (found_x - exp_y)%(p-1))
            print(tame_lookup, "\n", wild_lookup)
            return
    print("didn't find number")
    print(tame_lookup,"\n", wild_lookup)


main()
